//! { "cases": [ {
//!     "name": "simple",
//!     "input": [
//!         {
//!             "entry": "simple",
//!             "calldata": [
//!                 "10"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "10"
//!     ]
//! }, {
//!     "name": "complex",
//!     "input": [
//!         {
//!             "entry": "complex",
//!             "calldata": [
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "1"
//!     ]
//! } ] }

unsafe fn init_memory() {
    let mut memory_pointer: *mut u16 = 0x0002 as u16;
    *memory_pointer = 0x0004 as u16;
}

unsafe fn malloc<T>(size: u16) -> *mut T {
    let memory_pointer: *mut u16 = 0x0002 as u16;
    let return_pointer = *memory_pointer as *mut T;
    *memory_pointer = (return_pointer + size * size_of::<T>()) as u16;
    return_pointer
}

struct Vec {
    ptr: *mut u64,
    cap: u16,
    len: u16
}

impl Vec {
    pub unsafe fn grow(self) -> Self {
        let mut new_cap = 0 as u16;
        if self.cap == 0 {
            new_cap = 1 as u16;
        } else {
            new_cap = self.cap * 2;
        }
        let new_ptr = malloc::<u64>(new_cap);
        for i in 0..self.len {
            *(new_ptr + i) = *(self.ptr + i);
        }
        Self {
            ptr: new_ptr,
            cap: new_cap,
            len: self.len
        }
    }
}

impl Vec {
    pub fn new() -> Self {
        Self {
            ptr: 0 as u16 as *mut u64,
            cap: 0 as u16,
            len: 0 as u16
        }
    }

    pub unsafe fn insert(mut self, index: u16, val: u64) -> Self {
        if self.cap == self.len {
            self = self.grow();
        }

        let mut curr = self.len;
        while curr > index {
            *(self.ptr + curr) = *(self.ptr + curr - 1 as u16);
            curr -= 1 as u16;
        }
        *(self.ptr + index) = val;

        self.len += 1 as u16;

        self
    }

    pub unsafe fn remove(mut self, mut index: u16) -> Self {
        self.len = self.len - 1;

        while index < self.len {
            *(self.ptr + index) = *(self.ptr + index + 1 as u16);
            index += 1 as u16;
        }
        *(self.ptr + self.len) = 0 as u64;

        self
    }

    pub fn push(mut self, val: u64) -> Self {
        self.insert(self.len, val)
    }

    pub fn pop(mut self) -> Self {
        self.remove(self.len - 1)
    }

    pub unsafe fn get(self, index: u16) -> u64 {
        *(self.ptr + index)
    }
}

contract Test {
    pub unsafe fn simple(self, value: u64) -> u64 {
        init_memory();
        let mut vec = Vec::new();
        vec = vec.push(value);
        vec.get(0)
    }

    pub unsafe fn complex(self) -> u64 {
        init_memory();
        let mut vec = Vec::new();
        let mut result = true;

        for i in 0..200 {
            vec = vec.push(i as u64);
        }

        // 0 - 199
        if vec.len != 200 {
            result = false;
        }

        let mut i = 198 as u16;
        loop {
            vec = vec.remove(i);
            if i == 0 {
                break;
            }
            i -= 2 as u16;
        }
        // 1, 3, 5, 7,..., 199

        if vec.len != 100 {
            result = false;
        }
        while vec.len > 50 {
            vec = vec.pop();
        }
        // 1, 3, 5, 7,..., 99

        if vec.len != 50 {
            result = false;
        }
        i = 0 as u16;
        while i < 100 {
            vec = vec.insert(i, i as u64);
            i += 2 as u16;
        }

        if vec.len != 100 {
            result = false;
        }
        
        for ind in 0..100 {
            if vec.get(ind as u16) != ind as u64 {
                result = false;
            }
        }

        if result { 1 } else { 0 } as u64
    }
}