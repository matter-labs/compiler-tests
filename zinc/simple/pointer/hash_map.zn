//! { "cases": [ {
//!     "entry": "simple",
//!     "expected": 1
//! }, {
//!     "entry": "complex",
//!     "expected": 1
//! } ] }

// Hash map implementation with vector

// memory utils
fn init_memory() {
    let mut memory_pointer: *mut u16 = 0x0002 as u16;
    *memory_pointer = 0x0004 as u16;
}

fn malloc(size: u16) -> *mut Entry {
    let mut memory_pointer: *mut u16 = 0x0002 as u16;
    let return_pointer = *memory_pointer;
    *memory_pointer += size;
    return_pointer as *mut Entry
}

// Map entry
struct Entry {
    key: u64,
    value: u64,
}

const TYPE_SIZE: u16 = 2;

// Vector implementation
struct Vec {
    ptr: *mut Entry,
    cap: u16,
    len: u16
}

impl Vec {
    fn grow(self) -> Self {
        let mut new_cap = 0 as u16;
        if self.cap == 0 {
            new_cap = 1 as u16;
        } else {
            new_cap = self.cap * 2;
        }
        let new_ptr = malloc(new_cap * TYPE_SIZE);
        for i in 0..self.len {
            *(new_ptr + i * TYPE_SIZE) = *(self.ptr + i * TYPE_SIZE);
        }
        Self {
            ptr: new_ptr,
            cap: new_cap,
            len: self.len
        }
    }
}

impl Vec {
    pub fn new() -> Self {
        Self {
            ptr: 0 as u16 as *mut Entry,
            cap: 0 as u16,
            len: 0 as u16
        }
    }

    pub fn insert(mut self, index: u16, val: Entry) -> Self {
        if self.cap == self.len {
            self = self.grow();
        }

        let mut curr = self.len;
        while curr > index {
            *(self.ptr + curr * TYPE_SIZE) = *(self.ptr + curr * TYPE_SIZE - TYPE_SIZE as u16);
            curr -= 1 as u16;
        }
        *(self.ptr + index * TYPE_SIZE) = val;

        self.len += 1 as u16;

        self
    }

    pub fn remove(mut self, mut index: u16) -> Self {
        self.len = self.len - 1;

        while index < self.len {
            *(self.ptr + index * TYPE_SIZE) = *(self.ptr + index * TYPE_SIZE + TYPE_SIZE as u16);
            index += 1 as u16;
        }

        self
    }

    pub fn push(mut self, val: Entry) -> Self {
        self.insert(self.len, val)
    }

    pub fn pop(mut self) -> Self {
        self.remove(self.len - 1)
    }

    pub fn get(self, index: u16) -> Entry {
        *(self.ptr + index * TYPE_SIZE)
    }
}

const CAP: u16 = 32;

// Hash map implementation
struct HashMap {
    table: [Vec; CAP],
    len: u16
}

impl HashMap {
    pub fn new() -> Self {
        let mut result = Self {
            table: [Vec::new(); CAP],
            len: 0 as u16,
        };
        for i in 1..CAP {
            result.table[i] = Vec::new();
        }
        result
    }

    pub fn contains_key(self, key: u64) -> bool {
        let hash = key % CAP as u64;
        for i in 0..self.table[hash].len {
            if self.table[hash].get(i).key == key {
                return true;
            }
        }
        false
    }

    pub fn insert(mut self, key: u64, value: u64) -> Self {
        if self.contains_key(key) {
            return self;
        }
        self.len += 1 as u16;
        let hash = key % CAP as u64;
        self.table[hash] = self.table[hash].push(Entry {
            key: key,
            value: value,
        });
        self
    }

    pub fn remove(mut self, key: u64) -> Self {
        let hash = key % CAP as u64;
        let mut i = 0 as u16;
        while i < self.table[hash].len {
            if self.table[hash].get(i).key == key {
                self.table[hash] = self.table[hash].remove(i);
                self.len -= 1 as u16;
                break;
            }
            i += 1 as u16;
        }
        self
    }

    pub fn get(self, key: u64) -> u64 {
        let hash = key % CAP as u64;
        for i in 0..self.table[hash].len {
            if self.table[hash].get(i).key == key {
                return self.table[hash].get(i).value;
            }
        }
        0 as u64
    }
}

fn simple() -> u64 {
    init_memory();
    let mut map = HashMap::new();
    map.insert(10, 1);
    map.get(10)
}

fn complex() -> u64 {
    init_memory();
    let mut map = HashMap::new();
    for i in 0..200 {
        map = map.insert(i as u64, 200 as u64 - i as u64);
    }
    // 0 - 199
    if map.len != 200 {
        return 0 as u64;
    }
    let mut i = 0 as u64;
    while i < 200 {
        map = map.remove(i);
        i += 2 as u64;
    }
    // 1, 3, 5, 7,..., 199
    if map.len != 100 {
        return 0 as u64;
    }
    i = 0 as u64;
    while i < 200 {
        map = map.insert(i, 200 as u64 - i);
        i += 3 as u64;
    }
    // 0, 1, 3, 5, 6, 7,..., 199
    if map.len != 134 {
        return 0 as u64;
    }
    let mut result = true;
    for key in 0..200 {
        if key % 2 == 1 || key % 3 == 0 {
            result = result && map.contains_key(key as u64);
            result = result && map.get(key as u64) == 200 as u64 - key as u64;
        } else {
            result = result && !map.contains_key(key as u64);
        }
    }
    if result 
        {1} else {0} as u64
}