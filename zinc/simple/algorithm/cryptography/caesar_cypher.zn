//! { "cases": [ {
//!     "name": "encrypt",
//!     "input": [
//!         {
//!             "entry": "encrypt",
//!             "calldata": [
//!                 "12", "143", "213", "43", "85", "42", "98", "111", "224", "76", "117"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "129", "4", "74", "160", "202", "159", "215", "228", "85", "193"
//!     ]
//! }, {
//!     "name": "decrypt",
//!     "input": [
//!         {
//!             "entry": "decrypt",
//!             "calldata": [
//!                 "129", "4", "74", "160", "202", "159", "215", "228", "85", "193", "117"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "12", "143", "213", "43", "85", "42", "98", "111", "224", "76"
//!     ]
//! }, {
//!     "name": "complex",
//!     "input": [
//!         {
//!             "entry": "complex",
//!             "calldata": [
//!                 "1", "12", "55", "53", "213", "123", "45", "21", "12", "92"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "1"
//!     ]
//! } ] }

const SIZE: u8 = 10;

contract Test {
    pub fn encrypt(self, mut data: [u8; SIZE], key: u8) -> [u8; SIZE] {
        for i in 0..SIZE {
            data[i] = ((data[i] as u16 + key as u16) % (256 as u16)) as u8;
        }
        data
    } 

    pub fn decrypt(self, data: [u8; SIZE], key: u8) -> [u8; SIZE] {
        self.encrypt(data, ((256 - key as u16) % 256) as u8)
    }

    pub fn complex(self, message: [u8; SIZE]) -> u64 {
        let mut result = true;
        for key in 0..=100 {
            let output = self.decrypt(self.encrypt(message, key), key);
            for i in 0..SIZE {
                result = result && message[i] == output[i];
            }
        }
        if result
            {1} else {0} as u64
    }
}