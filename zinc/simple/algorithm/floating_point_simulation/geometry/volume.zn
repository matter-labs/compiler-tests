//! { "cases": [ {
//!     "name": "cube1",
//!     "input": [
//!         {
//!             "entry": "cube",
//!             "calldata": [
//!                 "3"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "27"
//!     ]
//! }, {
//!     "name": "cube2",
//!     "input": [
//!         {
//!             "entry": "cube",
//!             "calldata": [
//!                 "312174"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "30422169911604024"
//!     ]
//! }, {
//!     "name": "sphere1",
//!     "input": [
//!         {
//!             "entry": "sphere",
//!             "calldata": [
//!                 "7"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "143675"
//!     ]
//! }, {
//!     "name": "sphere2",
//!     "input": [
//!         {
//!             "entry": "sphere",
//!             "calldata": [
//!                 "71249"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "151504289520102405"
//!     ]
//! } ] }

const EPS: u128 = 1E6;
// PI * EPS^3
const PI: u128 = 3141592653589793238;
const PRECISION: u128 = 100;

struct Cube {
    a: u128,
}

struct Sphere {
    r: u128,
}

impl Cube {
    fn volume(self) -> u128 {
        self.a * self.a * self.a
    }
}

impl Sphere {
    fn volume(self, pi: u128) -> u128 {
        4 * pi * self.r * self.r * self.r / 3
    }
}

contract Test {
    pub fn cube(self, cube: Cube) -> u64 {
        cube.volume() as u64
    }

    pub fn sphere(self, sphere: Sphere) -> u64{
        // volume * PRECISION
        (sphere.volume(PI) * PRECISION / EPS / EPS / EPS) as u64
    }
}