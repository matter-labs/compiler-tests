//! { "cases": [ {
//!     "name": "distance_point1",
//!     "input": [
//!         {
//!             "entry": "distance_point",
//!             "calldata": [
//!                 "7", "4", "10",
//!                 "5", "1"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "607"
//!     ]
//! }, {
//!     "name": "distance_point2",
//!     "input": [
//!         {
//!             "entry": "distance_point",
//!             "calldata": [
//!                 "2117", "443", "1021",
//!                 "5123", "145"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "504455"
//!     ]
//! }, {
//!     "name": "intersection_point1",
//!     "input": [
//!         {
//!             "entry": "intersection_point",
//!             "calldata": [
//!                 "1", "1", "0",
//!                 "1", "1", "2"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "100", "100"
//!     ]
//! }, {
//!     "name": "intersection_point2",
//!     "input": [
//!         {
//!             "entry": "intersection_point",
//!             "calldata": [
//!                 "121", "17", "123",
//!                 "912", "123", "2133"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "69", "1218"
//!     ]
//! } ] }

const EPS: u128 = 1E6;
const PRECISION: u128 = 100;

struct Point {
    x: u128,
    y: u128,
}

struct Line {
    a: u128,
    b: u128,
    c: u128,
}

fn sqrt(n: u128) -> u128 {
    // binary search
    let mut l = 0 as u128;
    let mut r = n as u128;
    while l < r {
        let m = (l + r + 1) / 2;
        if m*m <= n {
            l = m;
        } else {
            r = m - 1;
        }
    }
    if n - l*l < (l+1)*(l+1) - n
        {l} else {l+1}
}

// mb1 == -b1, mc2 == -c2
// returns x * EPS, y * EPS
// Function not in Line structure for ease of understanding, because it use -b1 and -c2
fn lines_intersection(a1: u128, mb1: u128, c1: u128, a2: u128, b2: u128, mc2: u128) -> Point {
    let d = a1 * b2 + a2 * mb1;
    Point {
        x:(mb1 * mc2 - b2 * c1) * EPS / d,
        y: (a2 * c1 + a1 * mc2) * EPS / d,
    }
}

impl Line {
    // return distance * EPS
    fn distance_point(self, point: Point) -> u128 {
        ((self.a*point.x + self.b*point.y + self.c)*EPS*EPS) / sqrt((self.a*self.a + self.b*self.b)*EPS*EPS)
    }
}

contract Test {
    pub fn distance_point(self, line: Line, point: Point) -> u64 {
        // distance * PRECISION
        (line.distance_point(point) * PRECISION / EPS) as u64
    }

    pub fn intersection_point(self, a1: u128, mb1: u128, c1: u128, a2: u128, b2: u128, mc2: u128) -> Point {
        let mut point = lines_intersection(a1, mb1, c1, a2, b2, mc2);
        point.x *= PRECISION;
        point.x /= EPS;
        point.y *= PRECISION;
        point.y /= EPS;
        point
    }
}