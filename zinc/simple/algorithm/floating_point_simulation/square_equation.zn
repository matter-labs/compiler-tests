//! { "cases": [ {
//!     "name": "no_solution",
//!     "input": [
//!         {
//!             "entry": "entry",
//!             "calldata": [
//!                 "1", "1", "1"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "0", "0", "0"
//!     ]
//! }, {
//!     "name": "first",
//!     "input": [
//!         {
//!             "entry": "entry",
//!             "calldata": [
//!                 "2", "7", "4"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "1", "278", "71"
//!     ]
//! }, {
//!     "name": "second",
//!     "input": [
//!         {
//!             "entry": "entry",
//!             "calldata": [
//!                 "17", "29", "12"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "1", "100", "70"
//!     ]
//! } ] }

const EPS: u128 = 1E10;
const PRECISION: u128 = 100;
const MAX_U128_SQRT: u128 = 18446744073709551615;

fn sqrt(n: u128) -> u128 {
    // binary search
    let mut l = 0 as u128;
    let mut r = MAX_U128_SQRT;
    while l < r {
        let m = (l + r + 1) / 2;
        if m*m <= n {
            l = m;
        } else {
            r = m - 1;
        }
    }
    if n - l*l < (l+1)*(l+1) - n
        {l} else {l+1}
}

// mb = -b
// returns roots * EPS
fn solve(a: u128, mb: u128, c: u128) -> (bool, u128, u128) {
    if mb*mb < 4*a*c {
        return (false, 0 as u128, 0 as u128);
    }
    let d = (mb*mb - 4*a*c)*EPS*EPS;
    let sd = sqrt(d);
    // hack, as -b not working
    let x1 = (mb*EPS + sd) / 2 / a;
    let x2 = (mb*EPS - sd) / 2 / a;
    (true, x1, x2)
}

contract Test {
    pub fn entry(self, a: u128, mb: u128, c: u128) -> (bool, u128, u128) {
        let mut p = solve(a, mb, c);
        p.1 *= PRECISION;
        p.1 /= EPS;
        p.2 *= PRECISION;
        p.2 /= EPS;
        // roots * PRECISION
        p
    }
}