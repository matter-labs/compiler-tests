//! { "cases": [ {
//!     "name": "none",
//!     "input": [
//!         {
//!             "entry": "main",
//!             "calldata": [
//!                 "7", "2", "1", "8", "10", "3", "5", "4", "9", "6", "0"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "7", "2", "1", "8", "10", "3", "5", "4", "9", "6"
//!     ]
//! }, {
//!     "name": "ascending",
//!     "input": [
//!         {
//!             "entry": "main",
//!             "calldata": [
//!                 "7", "2", "1", "8", "10", "3", "5", "4", "9", "6", "1"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"
//!     ]
//! }, {
//!     "name": "descending",
//!     "input": [
//!         {
//!             "entry": "main",
//!             "calldata": [
//!                 "7", "2", "1", "8", "10", "3", "5", "4", "9", "6", "2"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "10", "9", "8", "7", "6", "5", "4", "3", "2", "1"
//!     ]
//! } ] }


const ARRAY_SIZE: u8 = 10;

enum Direction {
    None = 0,
    Ascending = 1,
    Descending = 2,
}

contract Test {
    pub fn main(self, mut array: [u8; ARRAY_SIZE], direction: Direction) -> [u8; ARRAY_SIZE] {
        let mut swapped = true;
        for i in 0..ARRAY_SIZE - 1 {
            swapped = false;
            for j in 0..ARRAY_SIZE - i - 1 {
                if match direction {
                    Direction::None => false,
                    Direction::Ascending => array[j] > array[j + 1],
                    Direction::Descending => array[j] < array[j + 1],
                } {
                    let temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                    swapped = true;
                }
            }
            if !swapped {
                break;
            }
        }
        array
    }
}
