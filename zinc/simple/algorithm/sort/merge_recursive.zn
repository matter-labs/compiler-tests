//! { "cases": [ {
//!     "entry": "none",
//!     "expected": 1
//! }, {
//!     "entry": "ascending",
//!     "expected": 1
//! }, {
//!     "entry": "descending",
//!     "expected": 1
//! } ] }

const ARRAY_SIZE: u8 = 10;

enum Direction {
    None = 0,
    Ascending = 1,
    Descending = 2,
}

fn none() -> u64 {
    let input = [7, 2, 1, 8, 10, 3, 5, 4, 9, 6];
    let output = merge_sort(input, 0, ARRAY_SIZE, Direction::None);

    let is_seven_first = output[0] == 7;
    let is_six_last = output[ARRAY_SIZE - 1] == 6;
    let result = is_seven_first && is_six_last;
    if result { 1 } else { 0 }
}

fn ascending() -> u64 {
    let input = [7, 2, 1, 8, 10, 3, 5, 4, 9, 6];
    let output = merge_sort(input, 0, ARRAY_SIZE, Direction::Ascending);

    let is_one_first = output[0] == 1;
    let is_ten_last = output[ARRAY_SIZE - 1] == 10;
    let result = is_one_first && is_ten_last;
    if result { 1 } else { 0 }
}

fn descending() -> u64 {
    let input = [7, 2, 1, 8, 10, 3, 5, 4, 9, 6];
    let output = merge_sort(input, 0, ARRAY_SIZE, Direction::Descending);

    let is_ten_first = output[0] == 10;
    let is_one_last = output[ARRAY_SIZE - 1] == 1;
    let result = is_ten_first && is_one_last;
    if result { 1 } else { 0 }
}

fn merge(mut array: [u8; ARRAY_SIZE], begin: u8, end: u8, mid: u8, direction: Direction) -> [u8; ARRAY_SIZE] {
    let mut res = array;

    let mut ptr = begin;
    let mut ptr1 = begin;
    let mut ptr2 = mid;

    while ptr1 < mid && ptr2 < end {
        if match direction {
            Direction::None => true,
            Direction::Ascending => array[ptr1] < array[ptr2],
            Direction::Descending => array[ptr1] > array[ptr2],
        } {
            res[ptr] = array[ptr1];
            ptr1 += 1;
        } else {
            res[ptr] = array[ptr2];
            ptr2 += 1;
        }
        ptr += 1;
    }

    while ptr1 < mid {
        res[ptr] = array[ptr1];
        ptr += 1;
        ptr1 += 1;
    }

    while ptr2 < end {
        res[ptr] = array[ptr2];
        ptr += 1;
        ptr2 += 1;
    }
    res
}

// recursive merge sort, but every call it copy all array
// so it use O(n^2) memory and complexity is O(n^2)
fn merge_sort(mut array: [u8; ARRAY_SIZE], begin: u8, end: u8, direction: Direction) -> [u8; ARRAY_SIZE] {
    if begin + 1 == end {
       return array;
    }

    let mid = (begin + end) / 2;
    array = merge_sort(array, begin, mid, direction);
    array = merge_sort(array, mid, end, direction);
    merge(array, begin, end, mid, direction)
}
