//! { "cases": [ {
//!     "name": "none",
//!     "input": [
//!         {
//!             "entry": "merge_sort",
//!             "calldata": [
//!                 "7", "2", "1", "8", "10", "3", "5", "4", "9", "6", "0", "10", "0"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "7", "2", "1", "8", "10", "3", "5", "4", "9", "6"
//!     ]
//! }, {
//!     "name": "ascending",
//!     "input": [
//!         {
//!             "entry": "merge_sort",
//!             "calldata": [
//!                 "7", "2", "1", "8", "10", "3", "5", "4", "9", "6", "0", "10", "1"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"
//!     ]
//! }, {
//!     "name": "descending",
//!     "input": [
//!         {
//!             "entry": "merge_sort",
//!             "calldata": [
//!                 "7", "2", "1", "8", "10", "3", "5", "4", "9", "6", "0", "10", "2"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "10", "9", "8", "7", "6", "5", "4", "3", "2", "1"
//!     ]
//! } ] }

const ARRAY_SIZE: u8 = 10;

enum Direction {
    None = 0,
    Ascending = 1,
    Descending = 2,
}

contract Test {
    fn merge(mut array: [u8; ARRAY_SIZE], begin: u8, end: u8, mid: u8, direction: Direction) -> [u8; ARRAY_SIZE] {
        let mut res = array;

        let mut ptr = begin;
        let mut ptr1 = begin;
        let mut ptr2 = mid;

        while ptr1 < mid && ptr2 < end {
            if match direction {
                Direction::None => true,
                Direction::Ascending => array[ptr1] < array[ptr2],
                Direction::Descending => array[ptr1] > array[ptr2],
            } {
                res[ptr] = array[ptr1];
                ptr1 += 1;
            } else {
                res[ptr] = array[ptr2];
                ptr2 += 1;
            }
            ptr += 1;
        }

        while ptr1 < mid {
            res[ptr] = array[ptr1];
            ptr += 1;
            ptr1 += 1;
        }

        while ptr2 < end {
            res[ptr] = array[ptr2];
            ptr += 1;
            ptr2 += 1;
        }
        res
    }

    // recursive merge sort, but every call it copy all array
    // so it use O(n^2) memory and complexity is O(n^2)
    pub fn merge_sort(self, mut array: [u8; ARRAY_SIZE], begin: u8, end: u8, direction: Direction) -> [u8; ARRAY_SIZE] {
        if begin + 1 == end {
           return array;
        }

        let mid = (begin + end) / 2;
        array = self.merge_sort(array, begin, mid, direction);
        array = self.merge_sort(array, mid, end, direction);
        Self::merge(array, begin, end, mid, direction)
    }
}