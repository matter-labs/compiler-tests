//! { "cases": [ {
//!     "name": "ascending",
//!     "input": [
//!         {
//!             "entry": "quick_sort",
//!             "calldata": [
//!                 "7", "2", "1", "8", "10", "3", "5", "4", "9", "6", "0", "10", "0"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"
//!     ]
//! }, {
//!     "name": "descending",
//!     "input": [
//!         {
//!             "entry": "quick_sort",
//!             "calldata": [
//!                 "7", "2", "1", "8", "10", "3", "5", "4", "9", "6", "0", "10", "1"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "10", "9", "8", "7", "6", "5", "4", "3", "2", "1"
//!     ]
//! } ] }

const ARRAY_SIZE: u8 = 10;

enum Direction {
    Ascending = 0,
    Descending = 1,
}

contract Test {
    // It copies all array for each call, so complexity O(n^2)
    pub fn quick_sort(self, mut array: [u8; ARRAY_SIZE], begin: u8, end: u8, direction: Direction) -> [u8; ARRAY_SIZE] {
        if end - begin < 2 {
            return array;
        }
        let pivot = array[end-1];
        let mut i = begin;

        for j in begin..end - 1 {
            if match direction {
                Direction::Ascending => array[j] < pivot,
                Direction::Descending => array[j] > pivot,
            } {
                let temp = array[i];
                array[i] = array[j];
                array[j] = temp;
                i += 1;
            }
        }
        array[end-1] = array[i];
        array[i] = pivot;

        array = self.quick_sort(array, begin, i, direction);
        array = self.quick_sort(array, i+1, end, direction);
        array
    }
}