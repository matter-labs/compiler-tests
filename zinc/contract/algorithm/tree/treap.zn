//! { "cases": [ {
//!     "name": "one",
//!     "input": [
//!         {
//!             "entry": "one",
//!             "calldata": [
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "1"
//!     ]
//! }, {
//!     "name": "two",
//!     "input": [
//!         {
//!             "entry": "two",
//!             "calldata": [
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "1"
//!     ]
//! } ] }


// complexity of methods above can be too big, as for calls it copies arrays, structs
// but it just for test

// Limit for nodes in memory and array size
const DIM: u8 = 12;

// Node of tree
struct Node {
    key: u8,
    prior: u8,
    l: u8,
    r: u8,
}

// Struct for imitation heap, pointers
struct Memory {
    nodes: [Node; DIM],
    cnt: u8,
}

impl Memory {
    fn new() -> Self {
        // starting from 1, as 0 like null ptr
        Memory {
            nodes: [ Node {
                key: 0,
                prior: 0,
                l: 0,
                r: 0,
                }; DIM],
            cnt: 1,
        }
    }
    fn new_node(mut self, node: Node) -> (u8, Self) {
        self.nodes[self.cnt] = node;
        self.cnt += 1;
        (self.cnt - 1, self)
    }
}

// merge and split for treap
fn merge(p1: u8, p2: u8, mut memory: Memory) -> (u8, Memory) {
    if p1 == 0 {
        return (p2, memory);
    }
    if p2 == 0 {
        return (p1, memory);
    }
    if memory.nodes[p1].prior > memory.nodes[p2].prior {
        let p = merge(memory.nodes[p1].r, p2, memory);
        memory = p.1;
        memory.nodes[p1].r = p.0;
        (p1, memory)
    } else {
        let p = merge(p1, memory.nodes[p2].l, memory);
        memory = p.1;
        memory.nodes[p2].l = p.0;
        (p2, memory)
    }
}

fn split(p: u8, val: u8, mut memory: Memory) -> (u8, u8, Memory) {
    if p == 0 {
        return (0, 0, memory);
    }
    if memory.nodes[p].key < val {
        let sp = split(memory.nodes[p].r, val, memory);
        memory = sp.2;
        memory.nodes[p].r = sp.0;
        (p, sp.1, memory)
    } else {
        let sp = split(memory.nodes[p].l, val, memory);
        memory = sp.2;
        memory.nodes[p].l = sp.1;
        (sp.0, p, memory)
    }
}

// add new node to treap if value not in treap already
fn add(root: u8, key: u8, mut memory: Memory) -> (u8, Memory) {
    let p = split(root, key, memory);
    // if key already in tree - ignore
    if split(p.1, key+1, p.2).0 != 0 {
        return (root, memory);
    }
    memory = p.2;

    let pm = memory.new_node(Node {
        key: key,
        // instead random
        prior: memory.cnt * key,
        l: 0,
        r: 0,
    });
    let new_node = pm.0;
    memory = pm.1;

    let p1 = merge(p.0, new_node, memory);
    memory = p1.1;
    merge(p1.0, p.1, memory)
}

// remove key from treap, if it containing
fn erase(root: u8, key: u8, mut memory: Memory) -> (u8, Memory) {
    let p = split(root, key, memory);
    let p1 = split(p.1, key+1, p.2);
    // if key not in tree - ignore
    if p1.0 == 0 {
        return (root, memory);
    }
    memory = p1.2;
    merge(p.0, p1.1, memory)
}

fn from_array(array: [u8; DIM], size: u8, mut memory: Memory) -> (u8, Memory) {
    let mut root = 0;
    for i in 0..size {
        let p = add(root, array[i], memory);
        root = p.0;
        memory = p.1;
    }
    (root, memory)
}

fn to_array(root: u8, memory: Memory) -> ([u8; DIM], u8) {
    if root == 0 {
        return ([0; DIM], 0);
    }
    let l = to_array(memory.nodes[root].l, memory);
    let r = to_array(memory.nodes[root].r, memory);
    let mut res = [0; DIM];
    let mut sz = 0;
    for i in 0..l.1 {
        res[sz] = l.0[i];
        sz += 1;
    }
    res[sz] = memory.nodes[root].key;
    sz += 1;
    for i in 0..r.1 {
        res[sz] = r.0[i];
        sz += 1;
    }
    (res, sz)
}

contract Test {
    pub fn one(self) -> u64 {
        let mut array = [0; DIM];
        let sz = 5;
        for i in 0..sz {
            array[i] = sz - i;
        }
        // 5 4 3 2 1
        let mut memory = Memory::new();

        let p = from_array(array, sz, memory);
        memory = p.1;
        let mut root = p.0;
        // 1 2 3 4 5

        let p1 = add(root, 7, memory);
        memory = p1.1;
        root = p1.0;
        // 1 2 3 4 5 7

        let p2 = erase(root, 3, memory);
        memory = p2.1;
        root = p2.0;
        // 1 2 4 5 7

        let p3 = add(root, 0, memory);
        memory = p3.1;
        root = p3.0;
        // 0 1 2 4 5 7
        let res = to_array(root, memory);
        let result = res.1 == 6 &&
                     res.0[0] == 0 &&
                     res.0[1] == 1 &&
                     res.0[2] == 2 &&
                     res.0[3] == 4 &&
                     res.0[4] == 5 &&
                     res.0[5] == 7;
        if result { 1 } else { 0 }
    }

    pub fn two(self) -> u64 {
        let mut memory = Memory::new();
        let mut root = 0;

        let mut i = 10;
        while i > 0 {
            let p = add(root, i, memory);
            memory = p.1;
            root = p.0;
            i -= 2;
        }
        // 2 4 6 8 10

        i = 1;
        while i <= 9 {
            let p = add(root, i, memory);
            memory = p.1;
            root = p.0;
            i += 2;
        }
        // 1 - 10

        i = 3;
        while i <= 9 {
            let p = erase(root, i, memory);
            memory = p.1;
            root = p.0;
            i += 3;
        }
        // 1 2 4 5 7 8 10

        i = 4;
        while i <= 8 {
            let p = erase(root, i, memory);
            memory = p.1;
            root = p.0;
            i += 4;
        }
        // 1 2 5 7 10

        let p = add(root, 6, memory);
        memory = p.1;
        root = p.0;
        // 1 2 5 6 7 10

        let res = to_array(root, memory);
        let result = res.1 == 6 &&
                     res.0[0] == 1 &&
                     res.0[1] == 2 &&
                     res.0[2] == 5 &&
                     res.0[3] == 6 &&
                     res.0[4] == 7 &&
                     res.0[5] == 10;
        if result { 1 } else { 0 }
    }
}