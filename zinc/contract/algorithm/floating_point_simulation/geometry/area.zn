//! { "cases": [ {
//!     "name": "triangle1",
//!     "input": [
//!         {
//!             "entry": "triangle",
//!             "calldata": [
//!                 "3", "4", "5"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "600"
//!     ]
//! }, {
//!     "name": "triangle2",
//!     "input": [
//!         {
//!             "entry": "triangle",
//!             "calldata": [
//!                 "37", "111", "87"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "136937"
//!     ]
//! }, {
//!     "name": "polygon1",
//!     "input": [
//!         {
//!             "entry": "polygon",
//!             "calldata": [
//!                 "5",
//!                 "2", "4", "5", "3", "0", "0", "0", "0", "0", "0",
//!                 "4", "3", "1", "0", "0", "0", "0", "0", "0", "0"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "1200"
//!     ]
//! }, {
//!     "name": "polygon2",
//!     "input": [
//!         {
//!             "entry": "polygon",
//!             "calldata": [
//!                 "7",
//!                 "13", "17", "111", "113", "55", "31", "1", "0", "0", "0",
//!                 "21", "29", "111", "92", "7", "7", "1", "0", "0", "0"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "385600"
//!     ]
//! }, {
//!     "name": "sphere1",
//!     "input": [
//!         {
//!             "entry": "sphere",
//!             "calldata": [
//!                 "7"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "61575"
//!     ]
//! }, {
//!     "name": "sphere2",
//!     "input": [
//!         {
//!             "entry": "sphere",
//!             "calldata": [
//!                 "7142423"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "64106342310051445"
//!     ]
//! } ] }

const EPS: u128 = 1E6;
// PI * EPS^3
const PI: u128 = 3141592653589793238;
const PRECISION: u128 = 100;
const DIM: u8 = 10;
const MAX_U128_SQRT: u128 = 18446744073709551615;

struct Triangle {
    a: u128,
    b: u128,
    c: u128,
}

struct Polygon {
    n: u8,
    x: [u128; DIM],
    y: [u128; DIM],
}

struct Sphere {
    r: u128,
}

fn sqrt(n: u128) -> u128 {
    // binary search
    let mut l = 0 as u128;
    let mut r = MAX_U128_SQRT;
    while l < r {
        let m = (l + r + 1) / 2;
        if m*m <= n {
            l = m;
        } else {
            r = m - 1;
        }
    }
    if n - l*l < (l+1)*(l+1) - n
        {l} else {l+1}
}

impl Triangle {
    fn area(self) -> u128 {
        let p = (self.a + self.b + self.c) / 2;
        sqrt(p * (p - self.a) * (p - self.b) * (p - self.c))
    }
}

impl Polygon {
    // coordinates should be clockwise
    fn area(self) -> u128 {
        let mut sp = 0 as u128;
        let mut sn = 0 as u128;
        for i in 1..self.n {
            if self.x[i] > self.x[i - 1] {
                sp += (self.x[i] - self.x[i - 1]) * (self.y[i] + self.y[i - 1]);
            } else {
                sn += (self.x[i-1] - self.x[i]) * (self.y[i] + self.y[i - 1])
            }
        }
        if self.x[0] > self.x[self.n - 1] {
            sp += (self.x[0] - self.x[self.n - 1]) * (self.y[0] + self.y[self.n - 1]);
        } else {
            sn += (self.x[self.n - 1] - self.x[0]) * (self.y[0] + self.y[self.n - 1]);
        };
        (sp - sn) / 2
    }
}

impl Sphere {
    fn surface(self, pi: u128) -> u128 {
        4 * pi * self.r * self.r
    }
}

contract Test {
    pub fn triangle(self, mut triangle: Triangle) -> u64 {
        triangle.a *= EPS;
        triangle.b *= EPS;
        triangle.c *= EPS;
        // area * PRECISION
        (triangle.area() * PRECISION / EPS / EPS) as u64
    }

    pub fn polygon(self, mut polygon: Polygon) -> u64 {
        for i in 0..polygon.n {
            polygon.x[i] *= EPS;
            polygon.y[i] *= EPS;
        }
        // area * PRECISION
        (polygon.area() * PRECISION / EPS / EPS) as u64
    }

    pub fn polygon2(self) -> u64 {
        let mut x = [0 as u128; DIM];
        let mut y = [0 as u128; DIM];
        x[0] = 13 as u128;
        y[0] = 21 as u128;
        x[1] = 17 as u128;
        y[1] = 29 as u128;
        x[2] = 111 as u128;
        y[2] = 111 as u128;
        x[3] = 113 as u128;
        y[3] = 92 as u128;
        x[4] = 55 as u128;
        y[4] = 7 as u128;
        x[5] = 31 as u128;
        y[5] = 7 as u128;
        x[6] = 1 as u128;
        y[6] = 1 as u128;
        for i in 0..7 {
            x[i] *= EPS;
            y[i] *= EPS;
        }
        let polygon = Polygon {
            n: 7,
            x: x,
            y: y,
        };
        // area * PRECISION
        (polygon.area() * PRECISION / EPS / EPS) as u64
    }

    pub fn sphere(self, sphere: Sphere) -> u64 {
        // surface * PRECISION
        (sphere.surface(PI) * PRECISION / EPS / EPS / EPS) as u64
    }
}