//! { "cases": [ {
//!     "name": "reverse_test",
//!     "input": [
//!         {
//!             "entry": "reverse_test",
//!             "calldata": [
//!                 "7", "2", "1", "8", "10", "3", "5", "4", "9", "6"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "6", "9", "4", "5", "3", "10", "8", "1", "2", "7", "10"
//!     ]
//! }, {
//!     "name": "unique_test",
//!     "input": [
//!         {
//!             "entry": "unique_test",
//!             "calldata": [
//!                 "7", "2", "7", "8", "10", "10", "5", "8", "9", "7"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "7", "2", "8", "10", "5", "9", "0", "0", "0", "0", "6"
//!     ]
//! }, {
//!     "name": "filter_greater",
//!     "input": [
//!         {
//!             "entry": "filter_test",
//!             "calldata": [
//!                 "7", "2", "7", "8", "10", "10", "5", "8", "9", "7", "0", "5"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "7", "7", "8", "10", "10", "8", "9", "7", "0", "0", "8"
//!     ]
//! }, {
//!     "name": "filter_less",
//!     "input": [
//!         {
//!             "entry": "filter_test",
//!             "calldata": [
//!                 "7", "2", "7", "8", "10", "10", "5", "8", "9", "7", "1", "8"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "7", "2", "7", "5", "7", "0", "0", "0", "0", "0", "5"
//!     ]
//! }, {
//!     "name": "filter_divide",
//!     "input": [
//!         {
//!             "entry": "filter_test",
//!             "calldata": [
//!                 "7", "2", "7", "8", "10", "10", "5", "8", "9", "7", "2", "2"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "2", "8", "10", "10", "8", "0", "0", "0", "0", "0", "5"
//!     ]
//! }, {
//!     "name": "map_add",
//!     "input": [
//!         {
//!             "entry": "map_test",
//!             "calldata": [
//!                 "7", "2", "1", "8", "10", "3", "5", "4", "9", "6", "0", "28"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "35", "30", "29", "36", "38", "31", "33", "32", "37", "34", "10"
//!     ]
//! }, {
//!     "name": "map_sub",
//!     "input": [
//!         {
//!             "entry": "map_test",
//!             "calldata": [
//!                 "18", "12", "7", "9", "21", "6", "22", "14", "9", "34", "1", "5"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "13", "7", "2", "4", "16", "1", "17", "9", "4", "29", "10"
//!     ]
//! }, {
//!     "name": "map_mul",
//!     "input": [
//!         {
//!             "entry": "map_test",
//!             "calldata": [
//!                 "7", "2", "1", "8", "10", "3", "5", "4", "9", "6", "2", "7"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "49", "14", "7", "56", "70", "21", "35", "28", "63", "42", "10"
//!     ]
//! }, {
//!     "name": "map_div",
//!     "input": [
//!         {
//!             "entry": "map_test",
//!             "calldata": [
//!                 "18", "12", "7", "9", "21", "6", "22", "14", "9", "34", "3", "4"
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "4", "3", "1", "2", "5", "1", "5", "3", "2", "8", "10"
//!     ]
//! }, {
//!     "name": "complex",
//!     "input": [
//!         {
//!             "entry": "complex",
//!             "calldata": [
//!             ]
//!         }
//!     ],
//!     "expected": [
//!         "4", "6", "2", "5", "0", "0", "0", "0", "0", "0", "4"
//!     ]
//! } ] }

const ARRAY_SIZE: u8 = 10;

struct Vector {
    array: [u8; ARRAY_SIZE],
    size: u8,
}

enum Filter {
    Greater = 0,
    Less = 1,
    Divide = 2,
}

enum Mapping {
    Add = 0,
    Sub = 1,
    Mul = 2,
    Div = 3,
}

impl Vector {
    fn from_array(array: [u8; ARRAY_SIZE], size: u8) -> Self {
        Vector {
            array: array,
            size: size,
        }
    }
}

impl Vector {
    fn reverse(self) -> Self {
        let mut result = self;
        for i in 0..result.size / 2 {
            let temp = result.array[i];
            result.array[i] = result.array[result.size - i - 1];
            result.array[result.size - i - 1] = temp;
        }
        result
    }

    fn unique(self) -> Self {
        let mut result = Vector {
            array: [0; ARRAY_SIZE],
            size: 0,
        };
        for i in 0..self.size {
            let mut fl = true;
            let mut j = 0;
            while j < i {
                if self.array[i] == self.array[j] {
                    fl = false;
                }
                j += 1;
            }
            if fl {
                result.array[result.size] = self.array[i];
                result.size += 1;
            }
        }
        result
    }

    fn filter(self, filter: Filter, param: u8) -> Self {
        let mut result = Vector {
            array: [0; ARRAY_SIZE],
            size: 0,
        };
        for i in 0..self.size {
            if match filter {
                Filter::Greater => self.array[i] > param,
                Filter::Less => self.array[i] < param,
                Filter::Divide => self.array[i] % param == 0,
            } {
                result.array[result.size] = self.array[i];
                result.size += 1;
            }
        }
        result
    }

    fn map(self, mapping: Mapping, param: u8) -> Self {
        let mut result = Vector {
            array: [0; ARRAY_SIZE],
            size: self.size,
        };
        for i in 0..self.size {
            result.array[i] = match mapping {
                Mapping::Add => self.array[i] + param,
                Mapping::Sub => self.array[i] - param,
                Mapping::Mul => self.array[i] * param,
                Mapping::Div => self.array[i] / param,
            }
        }
        result
    }
}

contract Test {
    pub fn reverse_test(self, input: [u8; ARRAY_SIZE]) -> Vector {
        Vector::from_array(input, ARRAY_SIZE).reverse()
    }

    pub fn unique_test(self, input: [u8; ARRAY_SIZE]) -> Vector {
        Vector::from_array(input, ARRAY_SIZE).unique()
    }

    pub fn filter_test(self, input: [u8; ARRAY_SIZE], filter: Filter, param: u8) -> Vector {
        Vector::from_array(input, ARRAY_SIZE).filter(filter, param)
    }

    pub fn map_test(self, input: [u8; ARRAY_SIZE], mapping: Mapping, param: u8) -> Vector {
        Vector::from_array(input, ARRAY_SIZE).map(mapping, param)
    }

    pub fn complex(self) -> Vector {
        let input = [18, 12, 7, 9, 21, 6, 22, 14, 9, 34];
        Vector::from_array(input, ARRAY_SIZE)
            .filter(Filter::Divide, 2) // 18 12 6 22 14 34
            .reverse() // 34 14 22 6 12 18
            .map(Mapping::Mul, 2) // 68 28 44 12 24 36
            .filter(Filter::Less, 60) // 28 44 12 24 36
            .map(Mapping::Add, 4) // 32 48 16 28 40
            .filter(Filter::Divide, 8) // 32 48 16 40
            .map(Mapping::Div, 7) // 4 6 2 5
    }
}